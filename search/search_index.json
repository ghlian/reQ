{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"reQ Open source HTTP requests library for kdb+/q A more fully-featured alternative to kdb+ built-in functions .Q.hg and .Q.hp , which provide basic HTTP query functionality. Features include: Support for custom headers Cookies Automatic conversion of JSON response to kdb+ object Backwards compatible with older versions of kdb+ - tested from v2.8+ Follows HTTP redirection Verbose mode to show raw requests & responses","title":"Overview"},{"location":"#req","text":"Open source HTTP requests library for kdb+/q A more fully-featured alternative to kdb+ built-in functions .Q.hg and .Q.hp , which provide basic HTTP query functionality. Features include: Support for custom headers Cookies Automatic conversion of JSON response to kdb+ object Backwards compatible with older versions of kdb+ - tested from v2.8+ Follows HTTP redirection Verbose mode to show raw requests & responses","title":"reQ"},{"location":"api/","text":"User API NOTE: The public API is still being defined & is subject to change. However, the majority of the functions should not change in usage or functionality. The main entry points for the library are via wrapper functions for a number of HTTP methods; .req.get , .req.post , .req.delete . Additionally, there is a simple wrapper for GET requests which do not require custom headers, .req.g , which is meant as a drop in replacement for .Q.hg with the enhanced features of reQ. Each request function will provide the following features: Store & send cookies as appropriate Follow HTTP redirects Automatically parse JSON responses The first argument to each function is always the URL for the request, including any URL parameters, and can be passed as a string, hsym or symbol. If sending numerous requests to the same host but with different URL parameters it is advisable to use strings, to avoid bloating internalised sym vector. Functions .req.get [url;headers] url : URL to send request to, as string, hsym or symbol headers : KDB dictionary of custom headers to add to HTTP request Example $ q req.q KDB+ 3.5 2017.10.11 Copyright (C) 1993-2017 Kx Systems l32/ 2()core 1945MB jonny grizzly 127.0.1.1 NONEXPIRE q).Q.hg`:http://httpbin.org/headers \"{\\n \\\"headers\\\": {\\n \\\"Connection\\\": \\\"close\\\", \\n \\\"Host\\\": \\\"httpbin.org\\\"\\n }\\n}\\n\" q).req.get[\"http://httpbin.org/headers\";`custom`headers!(\"with custom\";\"values\")] | Accept Connection Custom Headers Host User-Agent -------| ----------------------------------------------------------------- headers| \"*/*\" \"close\" \"with custom\" \"values\" \"httpbin.org\" \"kdb+/3.5\" .req.post [url;headers;body] url : URL to send request to, as string, hsym or symbol headers : KDB dictionary of custom headers to add to HTTP request body : request body, as a string -> where necessary, Content-Type should be set in header dict manually. Content-Length will be added automatically Note: In a future update, it will be possible to pass the body in a more user friendly way, see jonatonmcmurray/reQ#7 Example q).req.post[\"http://httpbin.org/post\";enlist[\"Content-Type\"]!enlist .req.ty`json;.j.j (1#`text)!1#`hello] args | (`symbol$())!() data | \"{\\\"text\\\":\\\"hello\\\"}\" files | (`symbol$())!() form | (`symbol$())!() headers| `Accept`Connection`Content-Length`Content-Type`Host`User-Agent!(\"*/*\";\"close\";\"16\";\"application/json\";\"httpbin.org\";\"kdb+/3.5\") json | (,`text)!,\"hello\" origin | \"146.199.80.196\" url | \"http://httpbin.org/post\" .req.delete [url;headers;body] url : URL to send request to, as string, hsym or symbol headers : KDB dictionary of custom headers to add to HTTP request body : request body, as a string -> where necessary, Content-Type should be set in header dict manually. Content-Length will be added automatically Note: In a future update, it will be possible to pass the body in a more user friendly way, see jonatonmcmurray/reQ#7 Example q).req.delete[\"http://httpbin.org/delete\";()!();()] args | (`symbol$())!() data | \"\" files | (`symbol$())!() form | (`symbol$())!() headers| `Accept`Connection`Content-Length`Host`User-Agent!(\"*/*\";\"close\";,\"0\";\"httpbin.org\";\"kdb+/3.5\") json | 0n origin | \"86.145.98.64\" url | \"http://httpbin.org/delete\" .req.g [url] Projection to send a simple GET request with no custom headers url : URL to send request to, as string, hsym or symbol Example q).req.g\"http://httpbin.org/get\" args | (`symbol$())!() headers| `Accept`Connection`Host`User-Agent!(\"*/*\";\"close\";\"httpbin.org\";\"kdb+/3.5\") origin | \"86.145.98.64\" url | \"http://httpbin.org/get\" .req.del [url;headers] Projection to send DELETE request with no body url : URL to send request to, as string, hsym or symbol headers : KDB dictionary of custom headers to add to HTTP request Example q).req.del[\"http://httpbin.org/delete\";`with`custom!(\"headers\";\"123\")] args | (`symbol$())!() data | \"\" files | (`symbol$())!() form | (`symbol$())!() headers| `Accept`Connection`Content-Length`Custom`Host`User-Agent`With!(\"*/*\";\"close\";,\"0\";\"123\";\"httpbin.org\";\"kdb+/3.5\";\"headers\") json | 0n origin | \"86.145.98.64\" url | \"http://httpbin.org/delete\" .req.d [url] Projection to send simple DELETE requests with no body or headers url : URL to send request to, as string, hsym or symbol Example q).req.d\"http://httpbin.org/delete\" args | (`symbol$())!() data | \"\" files | (`symbol$())!() form | (`symbol$())!() headers| `Accept`Connection`Content-Length`Host`User-Agent!(\"*/*\";\"close\";,\"0\";\"httpbin.org\";\"kdb+/3.5\") json | 0n origin | \"86.145.98.64\" url | \"http://httpbin.org/delete\"","title":"User API"},{"location":"api/#user-api","text":"NOTE: The public API is still being defined & is subject to change. However, the majority of the functions should not change in usage or functionality. The main entry points for the library are via wrapper functions for a number of HTTP methods; .req.get , .req.post , .req.delete . Additionally, there is a simple wrapper for GET requests which do not require custom headers, .req.g , which is meant as a drop in replacement for .Q.hg with the enhanced features of reQ. Each request function will provide the following features: Store & send cookies as appropriate Follow HTTP redirects Automatically parse JSON responses The first argument to each function is always the URL for the request, including any URL parameters, and can be passed as a string, hsym or symbol. If sending numerous requests to the same host but with different URL parameters it is advisable to use strings, to avoid bloating internalised sym vector.","title":"User API"},{"location":"api/#functions","text":"","title":"Functions"},{"location":"api/#reqget","text":"[url;headers] url : URL to send request to, as string, hsym or symbol headers : KDB dictionary of custom headers to add to HTTP request Example $ q req.q KDB+ 3.5 2017.10.11 Copyright (C) 1993-2017 Kx Systems l32/ 2()core 1945MB jonny grizzly 127.0.1.1 NONEXPIRE q).Q.hg`:http://httpbin.org/headers \"{\\n \\\"headers\\\": {\\n \\\"Connection\\\": \\\"close\\\", \\n \\\"Host\\\": \\\"httpbin.org\\\"\\n }\\n}\\n\" q).req.get[\"http://httpbin.org/headers\";`custom`headers!(\"with custom\";\"values\")] | Accept Connection Custom Headers Host User-Agent -------| ----------------------------------------------------------------- headers| \"*/*\" \"close\" \"with custom\" \"values\" \"httpbin.org\" \"kdb+/3.5\"","title":".req.get"},{"location":"api/#reqpost","text":"[url;headers;body] url : URL to send request to, as string, hsym or symbol headers : KDB dictionary of custom headers to add to HTTP request body : request body, as a string -> where necessary, Content-Type should be set in header dict manually. Content-Length will be added automatically Note: In a future update, it will be possible to pass the body in a more user friendly way, see jonatonmcmurray/reQ#7 Example q).req.post[\"http://httpbin.org/post\";enlist[\"Content-Type\"]!enlist .req.ty`json;.j.j (1#`text)!1#`hello] args | (`symbol$())!() data | \"{\\\"text\\\":\\\"hello\\\"}\" files | (`symbol$())!() form | (`symbol$())!() headers| `Accept`Connection`Content-Length`Content-Type`Host`User-Agent!(\"*/*\";\"close\";\"16\";\"application/json\";\"httpbin.org\";\"kdb+/3.5\") json | (,`text)!,\"hello\" origin | \"146.199.80.196\" url | \"http://httpbin.org/post\"","title":".req.post"},{"location":"api/#reqdelete","text":"[url;headers;body] url : URL to send request to, as string, hsym or symbol headers : KDB dictionary of custom headers to add to HTTP request body : request body, as a string -> where necessary, Content-Type should be set in header dict manually. Content-Length will be added automatically Note: In a future update, it will be possible to pass the body in a more user friendly way, see jonatonmcmurray/reQ#7 Example q).req.delete[\"http://httpbin.org/delete\";()!();()] args | (`symbol$())!() data | \"\" files | (`symbol$())!() form | (`symbol$())!() headers| `Accept`Connection`Content-Length`Host`User-Agent!(\"*/*\";\"close\";,\"0\";\"httpbin.org\";\"kdb+/3.5\") json | 0n origin | \"86.145.98.64\" url | \"http://httpbin.org/delete\"","title":".req.delete"},{"location":"api/#reqg","text":"[url] Projection to send a simple GET request with no custom headers url : URL to send request to, as string, hsym or symbol Example q).req.g\"http://httpbin.org/get\" args | (`symbol$())!() headers| `Accept`Connection`Host`User-Agent!(\"*/*\";\"close\";\"httpbin.org\";\"kdb+/3.5\") origin | \"86.145.98.64\" url | \"http://httpbin.org/get\"","title":".req.g"},{"location":"api/#reqdel","text":"[url;headers] Projection to send DELETE request with no body url : URL to send request to, as string, hsym or symbol headers : KDB dictionary of custom headers to add to HTTP request Example q).req.del[\"http://httpbin.org/delete\";`with`custom!(\"headers\";\"123\")] args | (`symbol$())!() data | \"\" files | (`symbol$())!() form | (`symbol$())!() headers| `Accept`Connection`Content-Length`Custom`Host`User-Agent`With!(\"*/*\";\"close\";,\"0\";\"123\";\"httpbin.org\";\"kdb+/3.5\";\"headers\") json | 0n origin | \"86.145.98.64\" url | \"http://httpbin.org/delete\"","title":".req.del"},{"location":"api/#reqd","text":"[url] Projection to send simple DELETE requests with no body or headers url : URL to send request to, as string, hsym or symbol Example q).req.d\"http://httpbin.org/delete\" args | (`symbol$())!() data | \"\" files | (`symbol$())!() form | (`symbol$())!() headers| `Accept`Connection`Content-Length`Host`User-Agent!(\"*/*\";\"close\";,\"0\";\"httpbin.org\";\"kdb+/3.5\") json | 0n origin | \"86.145.98.64\" url | \"http://httpbin.org/delete\"","title":".req.d"},{"location":"internal/","text":"Internal Functions Warning: The functions documented here are internal functions used by the library. While most of these are unlikely to change in usage in future versions be aware this is possible and take care if using these functions directly Below is preliminary documentation of internal functions, more detail will be added in time. .req.addcookie [host;cookiestring] The function called internally when a Set-Cookie header is received on an HTTP response, taking the host for the request & the cookie header string as arguments. q).req.addcookie[\"adventofcode.com\";\"session=n0tar34ls3ss10nc00k13\"] q).req.cookiejar host path name | val expires maxage secure httponly samesite ---------------------------------| --------------------------------------------------------------- \"adventofcode.com\" ,\"*\" \"session\"| \"n0tar34ls3ss10nc00k13\" 0 0 .req.getcookies [protocol;host;path] Get applicable cookies from cookiejar for given protocol, host & path .req.readjar [file] Read cURL/Netscape format cookiejar into reQ internal cookiejar format use `.req.cookiejar upsert .req.readjar[`:file] to update internal jar .req.writejar [file;jar] Write internal reQ cookiejar to file in cURL/Netscape format .req.sturl [url] Get string form of URL, given symbol, hsym or string .req.hsurl [url] Get hsym form of URL, given symbol, hsym or string .req.hap [url] Split URL into protocol, username:pass, domain & path. Accept string, hsym or symbol. .req.prot [url] Extract protocol from URL .req.user [url] Extract username:pass from URL .req.host [url] Extract domain from URL .req.endp [url] Extract endpoint/path from URL .req.b64encode [string] base64 encode a string (e.g. for HTTP Basic Authentication) .req.b64decode [string] base64 decode a string .req.ty Extended version of .h.ty dictionary mapping Content-Type strings to simple symbols .req.hu [string] Escape URI non-safe characters, based on RFC-3986 (more updated spec than .h.hu ) .req.proxy [host] Check if proxy is required for given host .req.headers [username;proxy;headers;payload] Generate HTTP headers from combination of defaults & custom headers, adding proxy headers if necessary & Content-Length for payload .req.enchd [headers] Convert a kdb dictionary to HTTP headers .req.buildquery [method;proxy;url;host;headers;payload] Build HTTP query string including necessary headers etc. .req.formatresp [response] Split HTTP response into header dictionary & body .req.urlencode [dict] Convert a kdb dictionary to a URL encoded string .req.urldecode [string] Convert a URL encoded string to a kdb dictionary .req.okstatus [verbose;response] Check status of response & signal if bad .req.send [method;url;headers;payload;verbose] Entry point for sending any type of HTTP request .req.parseresp [resp] If response has Content-Type: application/json , parse to kdb object. (Other formats may be added in future)","title":"Internal Functions"},{"location":"internal/#internal-functions","text":"Warning: The functions documented here are internal functions used by the library. While most of these are unlikely to change in usage in future versions be aware this is possible and take care if using these functions directly Below is preliminary documentation of internal functions, more detail will be added in time.","title":"Internal Functions"},{"location":"internal/#reqaddcookie","text":"[host;cookiestring] The function called internally when a Set-Cookie header is received on an HTTP response, taking the host for the request & the cookie header string as arguments. q).req.addcookie[\"adventofcode.com\";\"session=n0tar34ls3ss10nc00k13\"] q).req.cookiejar host path name | val expires maxage secure httponly samesite ---------------------------------| --------------------------------------------------------------- \"adventofcode.com\" ,\"*\" \"session\"| \"n0tar34ls3ss10nc00k13\" 0 0","title":".req.addcookie"},{"location":"internal/#reqgetcookies","text":"[protocol;host;path] Get applicable cookies from cookiejar for given protocol, host & path","title":".req.getcookies"},{"location":"internal/#reqreadjar","text":"[file] Read cURL/Netscape format cookiejar into reQ internal cookiejar format use `.req.cookiejar upsert .req.readjar[`:file] to update internal jar","title":".req.readjar"},{"location":"internal/#reqwritejar","text":"[file;jar] Write internal reQ cookiejar to file in cURL/Netscape format","title":".req.writejar"},{"location":"internal/#reqsturl","text":"[url] Get string form of URL, given symbol, hsym or string","title":".req.sturl"},{"location":"internal/#reqhsurl","text":"[url] Get hsym form of URL, given symbol, hsym or string","title":".req.hsurl"},{"location":"internal/#reqhap","text":"[url] Split URL into protocol, username:pass, domain & path. Accept string, hsym or symbol.","title":".req.hap"},{"location":"internal/#reqprot","text":"[url] Extract protocol from URL","title":".req.prot"},{"location":"internal/#requser","text":"[url] Extract username:pass from URL","title":".req.user"},{"location":"internal/#reqhost","text":"[url] Extract domain from URL","title":".req.host"},{"location":"internal/#reqendp","text":"[url] Extract endpoint/path from URL","title":".req.endp"},{"location":"internal/#reqb64encode","text":"[string] base64 encode a string (e.g. for HTTP Basic Authentication)","title":".req.b64encode"},{"location":"internal/#reqb64decode","text":"[string] base64 decode a string","title":".req.b64decode"},{"location":"internal/#reqty","text":"Extended version of .h.ty dictionary mapping Content-Type strings to simple symbols","title":".req.ty"},{"location":"internal/#reqhu","text":"[string] Escape URI non-safe characters, based on RFC-3986 (more updated spec than .h.hu )","title":".req.hu"},{"location":"internal/#reqproxy","text":"[host] Check if proxy is required for given host","title":".req.proxy"},{"location":"internal/#reqheaders","text":"[username;proxy;headers;payload] Generate HTTP headers from combination of defaults & custom headers, adding proxy headers if necessary & Content-Length for payload","title":".req.headers"},{"location":"internal/#reqenchd","text":"[headers] Convert a kdb dictionary to HTTP headers","title":".req.enchd"},{"location":"internal/#reqbuildquery","text":"[method;proxy;url;host;headers;payload] Build HTTP query string including necessary headers etc.","title":".req.buildquery"},{"location":"internal/#reqformatresp","text":"[response] Split HTTP response into header dictionary & body","title":".req.formatresp"},{"location":"internal/#requrlencode","text":"[dict] Convert a kdb dictionary to a URL encoded string","title":".req.urlencode"},{"location":"internal/#requrldecode","text":"[string] Convert a URL encoded string to a kdb dictionary","title":".req.urldecode"},{"location":"internal/#reqokstatus","text":"[verbose;response] Check status of response & signal if bad","title":".req.okstatus"},{"location":"internal/#reqsend","text":"[method;url;headers;payload;verbose] Entry point for sending any type of HTTP request","title":".req.send"},{"location":"internal/#reqparseresp","text":"[resp] If response has Content-Type: application/json , parse to kdb object. (Other formats may be added in future)","title":".req.parseresp"},{"location":"api/md/private/","text":".auth.getauth EXPERIMENTAL prompt for authorization if requested Parameter(s): Name Type Description h dict HTTP response headers u string | symbol | hsym URL Returns: Name Type Description string updated URL with supplied credentials .cookie.addcookies Add stored cookie(s) relevant to current query Parameter(s): Name Type Description q dict query object Returns: Name Type Description <returns> dict query objeect with added cookies .cookie.getcookies Get stored cookie(s) relevant to current query Parameter(s): Name Type Description q dict query object Returns: Name Type Description string cookie(s) .req.addheaders Convert headers to strings & add authorization and Content-Length Parameter(s): Name Type Description q dict query object Returns: Name Type Description <returns> dict Updated query object .req.buildquery Construct full HTTP query string from query object Parameter(s): Name Type Description q dict query object Returns: Name Type Description string HTTP query string .req.enchd Convert a KDB dictionary into HTTP headers Parameter(s): Name Type Description d dict dictionary of headers Returns: Name Type Description string string HTTP headers .req.formatresp Split HTTP response into headers & dict Parameter(s): Name Type Description r string raw HTTP response Returns: Name Type Description (dict; string) (response header;response body) .req.gb Generate boundary marker Parameter(s): Name Type Description x any Unused Returns: Name Type Description string Boundary marker .req.mkpt Create one part for a multipart form Parameter(s): Name Type Description b string boundary marker n string name for form part v string value for form part Returns: Name Type Description string[] multipart form .req.mult Build multi-part object Parameter(s): Name Type Description b string boundary marker d dict headers (incl. file to be multiparted) Returns: Name Type Description string Multipart form .req.multi Convert a q dictionary to a multipart form Parameter(s): Name Type Description d dict kdb dictionary to convert to form Returns: Name Type Description (dict; string) (HTTP headers;body) to give to .req.post .req.okstatus Signal if not OK status, return unchanged response if OK Parameter(s): Name Type Description v boolean verbose flag x (dict; string) HTTP response object Returns: Name Type Description (dict; string) HTTP response object .req.parseresp Parse to kdb object based on Content-Type header. Only supports JSON currently Parameter(s): Name Type Description r (dict; string) HTTP respone Returns: Name Type Description any Parsed response .req.proxy Applies proxy if relevant Parameter(s): Name Type Description u dict URL object Returns: Name Type Description <returns> dict Updated URL object .status.class get status \"class\" from status code, header dict or return object Parameter(s): Name Type Description x int | dict | (dict; string) status code, header dict or return object Returns: Name Type Description int status class .url.dec decode a URL encoded string to a KDB dictionary Parameter(s): Name Type Description x string URL encoded string Returns: Name Type Description <returns> dict kdb dictionary to encode .url.enc encode a KDB dictionary as a URL encoded string Parameter(s): Name Type Description d dict kdb dictionary to encode Returns: Name Type Description string URL encoded string .url.format format URL object into string Parameter(s): Name Type Description x dict URL dictionary Returns: Name Type Description string URL .url.hsurl return URL as an hsym Parameter(s): Name Type Description x string | symbol | hsym URL Returns: Name Type Description hsym URL .url.hu URI escaping for non-safe chars, RFC-3986 Parameter(s): Name Type Description x string URL Returns: Name Type Description string URL .url.parse parse a string/symbol/hsym URL into a URL dictionary & parse query Parameter(s): Name Type Description x string | symbol | hsym URL containing query Returns: Name Type Description <returns> dict URL dictionary .url.parse0 parse a string/symbol/hsym URL into a URL dictionary Parameter(s): Name Type Description q boolean parse URL query to kdb dict x string | symbol | hsym URL containing query Returns: Name Type Description <returns> dict URL dictionary .url.query Parse URL query; split on ?, urldecode query Parameter(s): Name Type Description x string URL containing query Returns: Name Type Description (string; dict) (URL;parsed query) .url.sturl return URL as a string Parameter(s): Name Type Description x string | symbol | hsym URL Returns: Name Type Description string URL","title":"Private functions"},{"location":"api/md/private/#authgetauth","text":"EXPERIMENTAL prompt for authorization if requested Parameter(s): Name Type Description h dict HTTP response headers u string | symbol | hsym URL Returns: Name Type Description string updated URL with supplied credentials","title":".auth.getauth"},{"location":"api/md/private/#cookieaddcookies","text":"Add stored cookie(s) relevant to current query Parameter(s): Name Type Description q dict query object Returns: Name Type Description <returns> dict query objeect with added cookies","title":".cookie.addcookies"},{"location":"api/md/private/#cookiegetcookies","text":"Get stored cookie(s) relevant to current query Parameter(s): Name Type Description q dict query object Returns: Name Type Description string cookie(s)","title":".cookie.getcookies"},{"location":"api/md/private/#reqaddheaders","text":"Convert headers to strings & add authorization and Content-Length Parameter(s): Name Type Description q dict query object Returns: Name Type Description <returns> dict Updated query object","title":".req.addheaders"},{"location":"api/md/private/#reqbuildquery","text":"Construct full HTTP query string from query object Parameter(s): Name Type Description q dict query object Returns: Name Type Description string HTTP query string","title":".req.buildquery"},{"location":"api/md/private/#reqenchd","text":"Convert a KDB dictionary into HTTP headers Parameter(s): Name Type Description d dict dictionary of headers Returns: Name Type Description string string HTTP headers","title":".req.enchd"},{"location":"api/md/private/#reqformatresp","text":"Split HTTP response into headers & dict Parameter(s): Name Type Description r string raw HTTP response Returns: Name Type Description (dict; string) (response header;response body)","title":".req.formatresp"},{"location":"api/md/private/#reqgb","text":"Generate boundary marker Parameter(s): Name Type Description x any Unused Returns: Name Type Description string Boundary marker","title":".req.gb"},{"location":"api/md/private/#reqmkpt","text":"Create one part for a multipart form Parameter(s): Name Type Description b string boundary marker n string name for form part v string value for form part Returns: Name Type Description string[] multipart form","title":".req.mkpt"},{"location":"api/md/private/#reqmult","text":"Build multi-part object Parameter(s): Name Type Description b string boundary marker d dict headers (incl. file to be multiparted) Returns: Name Type Description string Multipart form","title":".req.mult"},{"location":"api/md/private/#reqmulti","text":"Convert a q dictionary to a multipart form Parameter(s): Name Type Description d dict kdb dictionary to convert to form Returns: Name Type Description (dict; string) (HTTP headers;body) to give to .req.post","title":".req.multi"},{"location":"api/md/private/#reqokstatus","text":"Signal if not OK status, return unchanged response if OK Parameter(s): Name Type Description v boolean verbose flag x (dict; string) HTTP response object Returns: Name Type Description (dict; string) HTTP response object","title":".req.okstatus"},{"location":"api/md/private/#reqparseresp","text":"Parse to kdb object based on Content-Type header. Only supports JSON currently Parameter(s): Name Type Description r (dict; string) HTTP respone Returns: Name Type Description any Parsed response","title":".req.parseresp"},{"location":"api/md/private/#reqproxy","text":"Applies proxy if relevant Parameter(s): Name Type Description u dict URL object Returns: Name Type Description <returns> dict Updated URL object","title":".req.proxy"},{"location":"api/md/private/#statusclass","text":"get status \"class\" from status code, header dict or return object Parameter(s): Name Type Description x int | dict | (dict; string) status code, header dict or return object Returns: Name Type Description int status class","title":".status.class"},{"location":"api/md/private/#urldec","text":"decode a URL encoded string to a KDB dictionary Parameter(s): Name Type Description x string URL encoded string Returns: Name Type Description <returns> dict kdb dictionary to encode","title":".url.dec"},{"location":"api/md/private/#urlenc","text":"encode a KDB dictionary as a URL encoded string Parameter(s): Name Type Description d dict kdb dictionary to encode Returns: Name Type Description string URL encoded string","title":".url.enc"},{"location":"api/md/private/#urlformat","text":"format URL object into string Parameter(s): Name Type Description x dict URL dictionary Returns: Name Type Description string URL","title":".url.format"},{"location":"api/md/private/#urlhsurl","text":"return URL as an hsym Parameter(s): Name Type Description x string | symbol | hsym URL Returns: Name Type Description hsym URL","title":".url.hsurl"},{"location":"api/md/private/#urlhu","text":"URI escaping for non-safe chars, RFC-3986 Parameter(s): Name Type Description x string URL Returns: Name Type Description string URL","title":".url.hu"},{"location":"api/md/private/#urlparse","text":"parse a string/symbol/hsym URL into a URL dictionary & parse query Parameter(s): Name Type Description x string | symbol | hsym URL containing query Returns: Name Type Description <returns> dict URL dictionary","title":".url.parse"},{"location":"api/md/private/#urlparse0","text":"parse a string/symbol/hsym URL into a URL dictionary Parameter(s): Name Type Description q boolean parse URL query to kdb dict x string | symbol | hsym URL containing query Returns: Name Type Description <returns> dict URL dictionary","title":".url.parse0"},{"location":"api/md/private/#urlquery","text":"Parse URL query; split on ?, urldecode query Parameter(s): Name Type Description x string URL containing query Returns: Name Type Description (string; dict) (URL;parsed query)","title":".url.query"},{"location":"api/md/private/#urlsturl","text":"return URL as a string Parameter(s): Name Type Description x string | symbol | hsym URL Returns: Name Type Description string URL","title":".url.sturl"},{"location":"api/md/public/","text":".b64.dec base64 decode a string Parameter(s): Name Type Description x string base64 string to be decoded Returns: Name Type Description string decoded string .b64.enc base64 encode a string. Where available, defaults to .Q.btoa built-in Parameter(s): Name Type Description x string string to be encoded Returns: Name Type Description string encoded string .cookie.addcookie Add or update a cookie in the jar Parameter(s): Name Type Description h string hostname on which to apply cookie c string cookie string Returns: Name Type Description null .cookie.jar storage for cookies .cookie.readjar Read a Netscape/cURL format cookiejar Parameter(s): Name Type Description f string | symbol | hsym filename Returns: Name Type Description <returns> table cookie jar .cookie.writejar Write a Netscape/cURL format cookiejar Parameter(s): Name Type Description f string | symbol | hsym filename j table cookie jar Returns: Name Type Description hsym cookie jar filename .req.del Send an HTTP DELETE request, no body Parameter(s): Name Type Description x symbol | string | hsym URL y dict dictionary of custom HTTP headers to use Returns: Name Type Description (dict; string) | any HTTP response (headers;body), or parsed if JSON .req.delete Send an HTTP DELETE request Parameter(s): Name Type Description x symbol | string | hsym URL y dict dictionary of custom HTTP headers to use z string body for HTTP request Returns: Name Type Description (dict; string) | any HTTP response (headers;body), or parsed if JSON .req.g Send an HTTP GET request (simple, no custom headers) Parameter(s): Name Type Description x symbol | string | hsym URL Returns: Name Type Description (dict; string) | any HTTP response (headers;body), or parsed if JSON .req.get Send an HTTP GET request Parameter(s): Name Type Description x symbol | string | hsym URL y dict dictionary of custom HTTP headers to use Returns: Name Type Description (dict; string) | any HTTP response (headers;body), or parsed if JSON .req.post Send an HTTP POST request Parameter(s): Name Type Description x symbol | string | hsym URL y dict dictionary of custom HTTP headers to use z string body for HTTP request Returns: Name Type Description (dict; string) | any HTTP response (headers;body), or parsed if JSON .req.send Send an HTTP request Parameter(s): Name Type Description m symbol HTTP method/verb u symbol | string | hsym URL hd dict dictionary of custom HTTP headers to use p string payload/body (for POST requests) v boolean verbose flag Returns: Name Type Description (dict; string) HTTP response (headers;body) .req.timeout EXPERIMENTAL send a request with a client-side timeout Parameter(s): Name Type Description t int | long timeout (seconds) m symbol HTTP method/verb u symbol | string | hsym URL hd dict dictionary of custom HTTP headers to use p string payload/body (for POST requests) Returns: Name Type Description (dict; string) HTTP response (headers;body)","title":"Public functions"},{"location":"api/md/public/#b64dec","text":"base64 decode a string Parameter(s): Name Type Description x string base64 string to be decoded Returns: Name Type Description string decoded string","title":".b64.dec"},{"location":"api/md/public/#b64enc","text":"base64 encode a string. Where available, defaults to .Q.btoa built-in Parameter(s): Name Type Description x string string to be encoded Returns: Name Type Description string encoded string","title":".b64.enc"},{"location":"api/md/public/#cookieaddcookie","text":"Add or update a cookie in the jar Parameter(s): Name Type Description h string hostname on which to apply cookie c string cookie string Returns: Name Type Description null","title":".cookie.addcookie"},{"location":"api/md/public/#cookiejar","text":"storage for cookies","title":".cookie.jar"},{"location":"api/md/public/#cookiereadjar","text":"Read a Netscape/cURL format cookiejar Parameter(s): Name Type Description f string | symbol | hsym filename Returns: Name Type Description <returns> table cookie jar","title":".cookie.readjar"},{"location":"api/md/public/#cookiewritejar","text":"Write a Netscape/cURL format cookiejar Parameter(s): Name Type Description f string | symbol | hsym filename j table cookie jar Returns: Name Type Description hsym cookie jar filename","title":".cookie.writejar"},{"location":"api/md/public/#reqdel","text":"Send an HTTP DELETE request, no body Parameter(s): Name Type Description x symbol | string | hsym URL y dict dictionary of custom HTTP headers to use Returns: Name Type Description (dict; string) | any HTTP response (headers;body), or parsed if JSON","title":".req.del"},{"location":"api/md/public/#reqdelete","text":"Send an HTTP DELETE request Parameter(s): Name Type Description x symbol | string | hsym URL y dict dictionary of custom HTTP headers to use z string body for HTTP request Returns: Name Type Description (dict; string) | any HTTP response (headers;body), or parsed if JSON","title":".req.delete"},{"location":"api/md/public/#reqg","text":"Send an HTTP GET request (simple, no custom headers) Parameter(s): Name Type Description x symbol | string | hsym URL Returns: Name Type Description (dict; string) | any HTTP response (headers;body), or parsed if JSON","title":".req.g"},{"location":"api/md/public/#reqget","text":"Send an HTTP GET request Parameter(s): Name Type Description x symbol | string | hsym URL y dict dictionary of custom HTTP headers to use Returns: Name Type Description (dict; string) | any HTTP response (headers;body), or parsed if JSON","title":".req.get"},{"location":"api/md/public/#reqpost","text":"Send an HTTP POST request Parameter(s): Name Type Description x symbol | string | hsym URL y dict dictionary of custom HTTP headers to use z string body for HTTP request Returns: Name Type Description (dict; string) | any HTTP response (headers;body), or parsed if JSON","title":".req.post"},{"location":"api/md/public/#reqsend","text":"Send an HTTP request Parameter(s): Name Type Description m symbol HTTP method/verb u symbol | string | hsym URL hd dict dictionary of custom HTTP headers to use p string payload/body (for POST requests) v boolean verbose flag Returns: Name Type Description (dict; string) HTTP response (headers;body)","title":".req.send"},{"location":"api/md/public/#reqtimeout","text":"EXPERIMENTAL send a request with a client-side timeout Parameter(s): Name Type Description t int | long timeout (seconds) m symbol HTTP method/verb u symbol | string | hsym URL hd dict dictionary of custom HTTP headers to use p string payload/body (for POST requests) Returns: Name Type Description (dict; string) HTTP response (headers;body)","title":".req.timeout"},{"location":"api/md/variable/","text":".req.VERBOSE Flag for verbose mode .req.def Default headers added to all HTTP requests .req.ty Dictionary with Content-Types","title":"Variables"},{"location":"api/md/variable/#reqverbose","text":"Flag for verbose mode","title":".req.VERBOSE"},{"location":"api/md/variable/#reqdef","text":"Default headers added to all HTTP requests","title":".req.def"},{"location":"api/md/variable/#reqty","text":"Dictionary with Content-Types","title":".req.ty"},{"location":"examples/aoc/","text":"Advent of Code","title":"Advent of Code"},{"location":"examples/aoc/#advent-of-code","text":"","title":"Advent of Code"},{"location":"examples/github/","text":"GitHub","title":"GitHub"},{"location":"examples/github/#github","text":"","title":"GitHub"},{"location":"examples/jira/","text":"Atlassian JIRA","title":"JIRA"},{"location":"examples/jira/#atlassian-jira","text":"","title":"Atlassian JIRA"},{"location":"examples/zoho/","text":"Zoho People HR","title":"Zoho"},{"location":"examples/zoho/#zoho-people-hr","text":"","title":"Zoho People HR"},{"location":"features/cookies/","text":"HTTP Cookies reQ has built-in support for HTTP cookies; when a response is received with a Set-Cookie header, the relevant cookie will be stored in .cookie.jar , and then used automatically for future requests to the relevant host. Expired cookies will be ignored, although currently the Max-Age attribute is not taken into account; this will be rectified in a future update. It's also possible to use the .req.addcookie function, as demonstrated in the Advent of Code example. Setting cookies q).req.get[\"http://httpbin.org/cookies/set?abc=123&def=456\";()!()]; -- REQUEST -- GET /cookies/set?abc=123&def=456 HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:49:15 GMT Content-Type: text/html; charset=utf-8 Content-Length: 223 Location: /cookies Set-Cookie: abc=123; Path=/ Set-Cookie: def=456; Path=/ Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"> <title>Redirecting...</title> <h1>Redirecting...</h1> <p>You should be redirected automatically to target URL: <a href=\"/cookies\">/cookies</a>. If not click the link. -- REQUEST -- GET /cookies HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* Cookie: abc=123; def=456 -- RESPONSE -- HTTP/1.1 200 OK Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:49:16 GMT Content-Type: application/json Content-Length: 38 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur {\"cookies\":{\"abc\":\"123\",\"def\":\"456\"}} q).cookie.jar host path name | val expires maxage secure httponly samesite ------------------------| --------------------------------------------- \"httpbin.org\" \"/*\" \"abc\"| \"123\" 0 0 \"httpbin.org\" \"/*\" \"def\"| \"456\" 0 0 Deleting cookies Cookies can be deleted or overwritten in the normal fashion, and expired cookies will be ignored. q).req.get[\"http://httpbin.org/cookies/delete?abc\";()!()]; -- REQUEST -- GET /cookies/delete?abc HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* Cookie: abc=123; def=456 -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:50:48 GMT Content-Type: text/html; charset=utf-8 Content-Length: 223 Location: /cookies Set-Cookie: abc=; Expires=Thu, 01-Jan-1970 00:00:00 GMT; Max-Age=0; Path=/ Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"> <title>Redirecting...</title> <h1>Redirecting...</h1> <p>You should be redirected automatically to target URL: <a href=\"/cookies\">/cookies</a>. If not click the link. -- REQUEST -- GET /cookies HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* Cookie: def=456 -- RESPONSE -- HTTP/1.1 200 OK Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:50:48 GMT Content-Type: application/json Content-Length: 26 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur {\"cookies\":{\"def\":\"456\"}} q).cookie.jar host path name | val expires maxage secure httponl.. ------------------------| ---------------------------------------------------.. \"httpbin.org\" \"/*\" \"abc\"| \"\" 1970.01.01T00:00:00.000 0 0 0 .. \"httpbin.org\" \"/*\" \"def\"| \"456\" 0 0 .. Compatibility with cURL/Netscape cookie jar reQ has support for reading & writing the cookie jar in the format initially developed by Netscape and utilised in cURL. See https://curl.haxx.se/docs/http-cookies.html for more details on the format. This support allows for transition from a cURL based workflow. Reading cookie jar Read cookie jar with .req.readjar : jonny@kodiak ~/git/req (master) $ more tests/cookiejar # Netscape HTTP Cookie File # https://curl.haxx.se/docs/http-cookies.html # This file was generated by reQ! Edit at your own risk. httpbin.org TRUE / FALSE 1143149359 abc 123 httpbin.org FALSE /example TRUE 0 def 123 jonny@kodiak ~/git/req (master) $ q KDB+ 3.5 2018.04.25 Copyright (C) 1993-2018 Kx Systems l64/ 4(16)core 7360MB jonny kodiak 127.0.1.1 EXPIRE 2019.05.21 jonathon.mcmurray@aquaq.co.uk KOD #4160315 q)\\l req.q q).req.readjar`:tests/cookiejar host path secure expires name val httponly maxage samesite ---------------------------------------------------------------------------------------------- \"*httpbin.org\" \"/*\" 0 2006.03.23T21:29:19.000 \"abc\" \"123\" 0 \"httpbin.org\" \"/example*\" 1 \"def\" \"123\" 0 Writing cookie jar Write cookie jar with .req.writejar : jonny@kodiak ~/git/req (master) $ q KDB+ 3.5 2018.04.25 Copyright (C) 1993-2018 Kx Systems l64/ 4(16)core 7360MB jonny kodiak 127.0.1.1 EXPIRE 2019.05.21 jonathon.mcmurray@aquaq.co.uk KOD #4160315 q)\\l req.q ... // build up reQ cookiejar q).cookie.jar host path name | val expires maxage secure httponly samesite --------------------------------| ------------------------------------------------------------- \"*httpbin.org\" \"/*\" \"abc\"| \"123\" 2006.03.23T21:29:19.000 0 0 \"httpbin.org\" \"/example*\" \"def\"| \"123\" 1 0 q).req.writejar[`:jar].cookie.jar `:jar q)\\\\ jonny@kodiak ~/git/req_bk (master) $ more jar # Netscape HTTP Cookie File # https://curl.haxx.se/docs/http-cookies.html # This file was generated by reQ! Edit at your own risk. httpbin.org TRUE / FALSE 1143149359 abc 123 httpbin.org FALSE /example TRUE 0 def 123","title":"Cookies"},{"location":"features/cookies/#http-cookies","text":"reQ has built-in support for HTTP cookies; when a response is received with a Set-Cookie header, the relevant cookie will be stored in .cookie.jar , and then used automatically for future requests to the relevant host. Expired cookies will be ignored, although currently the Max-Age attribute is not taken into account; this will be rectified in a future update. It's also possible to use the .req.addcookie function, as demonstrated in the Advent of Code example.","title":"HTTP Cookies"},{"location":"features/cookies/#setting-cookies","text":"q).req.get[\"http://httpbin.org/cookies/set?abc=123&def=456\";()!()]; -- REQUEST -- GET /cookies/set?abc=123&def=456 HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:49:15 GMT Content-Type: text/html; charset=utf-8 Content-Length: 223 Location: /cookies Set-Cookie: abc=123; Path=/ Set-Cookie: def=456; Path=/ Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"> <title>Redirecting...</title> <h1>Redirecting...</h1> <p>You should be redirected automatically to target URL: <a href=\"/cookies\">/cookies</a>. If not click the link. -- REQUEST -- GET /cookies HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* Cookie: abc=123; def=456 -- RESPONSE -- HTTP/1.1 200 OK Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:49:16 GMT Content-Type: application/json Content-Length: 38 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur {\"cookies\":{\"abc\":\"123\",\"def\":\"456\"}} q).cookie.jar host path name | val expires maxage secure httponly samesite ------------------------| --------------------------------------------- \"httpbin.org\" \"/*\" \"abc\"| \"123\" 0 0 \"httpbin.org\" \"/*\" \"def\"| \"456\" 0 0","title":"Setting cookies"},{"location":"features/cookies/#deleting-cookies","text":"Cookies can be deleted or overwritten in the normal fashion, and expired cookies will be ignored. q).req.get[\"http://httpbin.org/cookies/delete?abc\";()!()]; -- REQUEST -- GET /cookies/delete?abc HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* Cookie: abc=123; def=456 -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:50:48 GMT Content-Type: text/html; charset=utf-8 Content-Length: 223 Location: /cookies Set-Cookie: abc=; Expires=Thu, 01-Jan-1970 00:00:00 GMT; Max-Age=0; Path=/ Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"> <title>Redirecting...</title> <h1>Redirecting...</h1> <p>You should be redirected automatically to target URL: <a href=\"/cookies\">/cookies</a>. If not click the link. -- REQUEST -- GET /cookies HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* Cookie: def=456 -- RESPONSE -- HTTP/1.1 200 OK Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:50:48 GMT Content-Type: application/json Content-Length: 26 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur {\"cookies\":{\"def\":\"456\"}} q).cookie.jar host path name | val expires maxage secure httponl.. ------------------------| ---------------------------------------------------.. \"httpbin.org\" \"/*\" \"abc\"| \"\" 1970.01.01T00:00:00.000 0 0 0 .. \"httpbin.org\" \"/*\" \"def\"| \"456\" 0 0 ..","title":"Deleting cookies"},{"location":"features/cookies/#compatibility-with-curlnetscape-cookie-jar","text":"reQ has support for reading & writing the cookie jar in the format initially developed by Netscape and utilised in cURL. See https://curl.haxx.se/docs/http-cookies.html for more details on the format. This support allows for transition from a cURL based workflow.","title":"Compatibility with cURL/Netscape cookie jar"},{"location":"features/cookies/#reading-cookie-jar","text":"Read cookie jar with .req.readjar : jonny@kodiak ~/git/req (master) $ more tests/cookiejar # Netscape HTTP Cookie File # https://curl.haxx.se/docs/http-cookies.html # This file was generated by reQ! Edit at your own risk. httpbin.org TRUE / FALSE 1143149359 abc 123 httpbin.org FALSE /example TRUE 0 def 123 jonny@kodiak ~/git/req (master) $ q KDB+ 3.5 2018.04.25 Copyright (C) 1993-2018 Kx Systems l64/ 4(16)core 7360MB jonny kodiak 127.0.1.1 EXPIRE 2019.05.21 jonathon.mcmurray@aquaq.co.uk KOD #4160315 q)\\l req.q q).req.readjar`:tests/cookiejar host path secure expires name val httponly maxage samesite ---------------------------------------------------------------------------------------------- \"*httpbin.org\" \"/*\" 0 2006.03.23T21:29:19.000 \"abc\" \"123\" 0 \"httpbin.org\" \"/example*\" 1 \"def\" \"123\" 0","title":"Reading cookie jar"},{"location":"features/cookies/#writing-cookie-jar","text":"Write cookie jar with .req.writejar : jonny@kodiak ~/git/req (master) $ q KDB+ 3.5 2018.04.25 Copyright (C) 1993-2018 Kx Systems l64/ 4(16)core 7360MB jonny kodiak 127.0.1.1 EXPIRE 2019.05.21 jonathon.mcmurray@aquaq.co.uk KOD #4160315 q)\\l req.q ... // build up reQ cookiejar q).cookie.jar host path name | val expires maxage secure httponly samesite --------------------------------| ------------------------------------------------------------- \"*httpbin.org\" \"/*\" \"abc\"| \"123\" 2006.03.23T21:29:19.000 0 0 \"httpbin.org\" \"/example*\" \"def\"| \"123\" 1 0 q).req.writejar[`:jar].cookie.jar `:jar q)\\\\ jonny@kodiak ~/git/req_bk (master) $ more jar # Netscape HTTP Cookie File # https://curl.haxx.se/docs/http-cookies.html # This file was generated by reQ! Edit at your own risk. httpbin.org TRUE / FALSE 1143149359 abc 123 httpbin.org FALSE /example TRUE 0 def 123","title":"Writing cookie jar"},{"location":"features/headers/","text":"HTTP Request Headers Default headers The default headers sent with requests are found in .req.def : q).req.def \"Connection\"| \"Close\" \"User-Agent\"| \"kdb+/3.5\" \"Accept\" | \"*/*\" The User-Agent header is automatically generated from the version of kdb+ (i.e. .z.K ) Custom headers One of the key features of reQ is the ability to send custom headers with HTTP requests. This is done by supplying a dictionary of custom headers as the second argument to many of the User API functions, such as .req.get , .req.post , .req.delete and .req.del For example: q).req.get[\"http://httpbin.org/headers\";`custom`headers!(\"with custom\";\"values\")] | Accept Connection Custom Headers Host User-Agent -------| ----------------------------------------------------------------- headers| \"*/*\" \"close\" \"with custom\" \"values\" \"httpbin.org\" \"kdb+/3.5\"","title":"Headers"},{"location":"features/headers/#http-request-headers","text":"","title":"HTTP Request Headers"},{"location":"features/headers/#default-headers","text":"The default headers sent with requests are found in .req.def : q).req.def \"Connection\"| \"Close\" \"User-Agent\"| \"kdb+/3.5\" \"Accept\" | \"*/*\" The User-Agent header is automatically generated from the version of kdb+ (i.e. .z.K )","title":"Default headers"},{"location":"features/headers/#custom-headers","text":"One of the key features of reQ is the ability to send custom headers with HTTP requests. This is done by supplying a dictionary of custom headers as the second argument to many of the User API functions, such as .req.get , .req.post , .req.delete and .req.del For example: q).req.get[\"http://httpbin.org/headers\";`custom`headers!(\"with custom\";\"values\")] | Accept Connection Custom Headers Host User-Agent -------| ----------------------------------------------------------------- headers| \"*/*\" \"close\" \"with custom\" \"values\" \"httpbin.org\" \"kdb+/3.5\"","title":"Custom headers"},{"location":"features/redirects/","text":"HTTP redirects reQ will automatically follow redirects, both absolute & relative. For example, Relative redirect example q).req.get[\"http://httpbin.org/relative-redirect/2\";()!()]; -- REQUEST -- GET /relative-redirect/2 HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:41:53 GMT Content-Type: text/html; charset=utf-8 Content-Length: 0 Location: /relative-redirect/1 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur -- REQUEST -- GET /relative-redirect/1 HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:41:54 GMT Content-Type: text/html; charset=utf-8 Content-Length: 0 Location: /get Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur -- REQUEST -- GET /get HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 200 OK Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:41:54 GMT Content-Type: application/json Content-Length: 162 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur {\"args\":{},\"headers\":{\"Accept\":\"*/*\",\"Connection\":\"close\",\"Host\":\"httpbin.org\",\"User-Agent\":\"kdb+/3.5\"},\"origin\":\"146.199.80.196\",\"url\":\"http://httpbin.org/get\"} Absolute redirect example q).req.get[\"http://httpbin.org/absolute-redirect/2\";()!()]; -- REQUEST -- GET /absolute-redirect/2 HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:42:02 GMT Content-Type: text/html; charset=utf-8 Content-Length: 283 Location: http://httpbin.org/absolute-redirect/1 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"> <title>Redirecting...</title> <h1>Redirecting...</h1> <p>You should be redirected automatically to target URL: <a href=\"http://httpbin.org/absolute-redirect/1\">http://httpbin.org/absolute-redirect/1</a>. If not click the link. -- REQUEST -- GET /absolute-redirect/1 HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:42:02 GMT Content-Type: text/html; charset=utf-8 Content-Length: 251 Location: http://httpbin.org/get Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"> <title>Redirecting...</h1> <p>You should be redirected automatically to target URL: <a href=\"http://httpbin.org/get\">http://httpbin.org/get</a>. If not click the link. -- REQUEST -- GET /get HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 200 OK Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:42:03 GMT Content-Type: application/json Content-Length: 162 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur {\"args\":{},\"headers\":{\"Accept\":\"*/*\",\"Connection\":\"close\",\"Host\":\"httpbin.org\",\"User-Agent\":\"kdb+/3.5\"},\"origin\":\"146.199.80.196\",\"url\":\"http://httpbin.org/get\"}","title":"HTTP redirects"},{"location":"features/redirects/#http-redirects","text":"reQ will automatically follow redirects, both absolute & relative. For example,","title":"HTTP redirects"},{"location":"features/redirects/#relative-redirect-example","text":"q).req.get[\"http://httpbin.org/relative-redirect/2\";()!()]; -- REQUEST -- GET /relative-redirect/2 HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:41:53 GMT Content-Type: text/html; charset=utf-8 Content-Length: 0 Location: /relative-redirect/1 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur -- REQUEST -- GET /relative-redirect/1 HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:41:54 GMT Content-Type: text/html; charset=utf-8 Content-Length: 0 Location: /get Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur -- REQUEST -- GET /get HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 200 OK Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:41:54 GMT Content-Type: application/json Content-Length: 162 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur {\"args\":{},\"headers\":{\"Accept\":\"*/*\",\"Connection\":\"close\",\"Host\":\"httpbin.org\",\"User-Agent\":\"kdb+/3.5\"},\"origin\":\"146.199.80.196\",\"url\":\"http://httpbin.org/get\"}","title":"Relative redirect example"},{"location":"features/redirects/#absolute-redirect-example","text":"q).req.get[\"http://httpbin.org/absolute-redirect/2\";()!()]; -- REQUEST -- GET /absolute-redirect/2 HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:42:02 GMT Content-Type: text/html; charset=utf-8 Content-Length: 283 Location: http://httpbin.org/absolute-redirect/1 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"> <title>Redirecting...</title> <h1>Redirecting...</h1> <p>You should be redirected automatically to target URL: <a href=\"http://httpbin.org/absolute-redirect/1\">http://httpbin.org/absolute-redirect/1</a>. If not click the link. -- REQUEST -- GET /absolute-redirect/1 HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:42:02 GMT Content-Type: text/html; charset=utf-8 Content-Length: 251 Location: http://httpbin.org/get Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"> <title>Redirecting...</h1> <p>You should be redirected automatically to target URL: <a href=\"http://httpbin.org/get\">http://httpbin.org/get</a>. If not click the link. -- REQUEST -- GET /get HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 200 OK Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:42:03 GMT Content-Type: application/json Content-Length: 162 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur {\"args\":{},\"headers\":{\"Accept\":\"*/*\",\"Connection\":\"close\",\"Host\":\"httpbin.org\",\"User-Agent\":\"kdb+/3.5\"},\"origin\":\"146.199.80.196\",\"url\":\"http://httpbin.org/get\"}","title":"Absolute redirect example"},{"location":"features/verbose/","text":"Verbose mode reQ includes a verbose mode which displays the raw HTTP requests & responses. This can be useful for debugging purposes, to view the full headers on both the request & response. To enable this mode, either start the process with -verbose on the command line, or else set .req.VERBOSE:1b before making the requests. Examples Setting -verbose on command line & performing a basic HTTP request: jonny@kodiak ~/reQ (master) $ q req.q -verbose KDB+ 3.5 2018.04.25 Copyright (C) 1993-2018 Kx Systems l64/ 4(16)core 7360MB jonny kodiak 127.0.1.1 EXPIRE 2019.05.21 jonathon.mcmurray@aquaq.co.uk KOD #4160315 q).req.get[\"http://httpbin.org/get\";()!()]; -- REQUEST -- GET /get HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 200 OK Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:35:50 GMT Content-Type: application/json Content-Length: 162 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur {\"args\":{},\"headers\":{\"Accept\":\"*/*\",\"Connection\":\"close\",\"Host\":\"httpbin.org\",\"User-Agent\":\"kdb+/3.5\"},\"origin\":\"146.199.80.196\",\"url\":\"http://httpbin.org/get\"} An example including HTTP redirects i.e. multiple requests & responses, and setting .req.VERBOSE:1b within q session: jonny@kodiak ~/reQ (master) $ q req.q KDB+ 3.5 2018.04.25 Copyright (C) 1993-2018 Kx Systems l64/ 4(16)core 7360MB jonny kodiak 127.0.1.1 EXPIRE 2019.05.21 jonathon.mcmurray@aquaq.co.uk KOD #4160315 q).req.VERBOSE:1b q).req.get[\"http://httpbin.org/redirect/2\";()!()]; -- REQUEST -- GET /redirect/2 HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:36:32 GMT Content-Type: text/html; charset=utf-8 Content-Length: 247 Location: /relative-redirect/1 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"> <title>Redirecting...</title> <h1>Redirecting...</h1> <p>You should be redirected automatically to target URL: <a href=\"/relative-redirect/1\">/relative-redirect/1</a>. If not click the link. -- REQUEST -- GET /relative-redirect/1 HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:36:32 GMT Content-Type: text/html; charset=utf-8 Content-Length: 0 Location: /get Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur -- REQUEST -- GET /get HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 200 OK Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:36:32 GMT Content-Type: application/json Content-Length: 162 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur {\"args\":{},\"headers\":{\"Accept\":\"*/*\",\"Connection\":\"close\",\"Host\":\"httpbin.org\",\"User-Agent\":\"kdb+/3.5\"},\"origin\":\"146.199.80.196\",\"url\":\"http://httpbin.org/get\"}","title":"Verbose mode"},{"location":"features/verbose/#verbose-mode","text":"reQ includes a verbose mode which displays the raw HTTP requests & responses. This can be useful for debugging purposes, to view the full headers on both the request & response. To enable this mode, either start the process with -verbose on the command line, or else set .req.VERBOSE:1b before making the requests.","title":"Verbose mode"},{"location":"features/verbose/#examples","text":"Setting -verbose on command line & performing a basic HTTP request: jonny@kodiak ~/reQ (master) $ q req.q -verbose KDB+ 3.5 2018.04.25 Copyright (C) 1993-2018 Kx Systems l64/ 4(16)core 7360MB jonny kodiak 127.0.1.1 EXPIRE 2019.05.21 jonathon.mcmurray@aquaq.co.uk KOD #4160315 q).req.get[\"http://httpbin.org/get\";()!()]; -- REQUEST -- GET /get HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 200 OK Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:35:50 GMT Content-Type: application/json Content-Length: 162 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur {\"args\":{},\"headers\":{\"Accept\":\"*/*\",\"Connection\":\"close\",\"Host\":\"httpbin.org\",\"User-Agent\":\"kdb+/3.5\"},\"origin\":\"146.199.80.196\",\"url\":\"http://httpbin.org/get\"} An example including HTTP redirects i.e. multiple requests & responses, and setting .req.VERBOSE:1b within q session: jonny@kodiak ~/reQ (master) $ q req.q KDB+ 3.5 2018.04.25 Copyright (C) 1993-2018 Kx Systems l64/ 4(16)core 7360MB jonny kodiak 127.0.1.1 EXPIRE 2019.05.21 jonathon.mcmurray@aquaq.co.uk KOD #4160315 q).req.VERBOSE:1b q).req.get[\"http://httpbin.org/redirect/2\";()!()]; -- REQUEST -- GET /redirect/2 HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:36:32 GMT Content-Type: text/html; charset=utf-8 Content-Length: 247 Location: /relative-redirect/1 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"> <title>Redirecting...</title> <h1>Redirecting...</h1> <p>You should be redirected automatically to target URL: <a href=\"/relative-redirect/1\">/relative-redirect/1</a>. If not click the link. -- REQUEST -- GET /relative-redirect/1 HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 302 FOUND Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:36:32 GMT Content-Type: text/html; charset=utf-8 Content-Length: 0 Location: /get Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur -- REQUEST -- GET /get HTTP/1.1 Host: httpbin.org Connection: Close User-Agent: kdb+/3.5 Accept: */* -- RESPONSE -- HTTP/1.1 200 OK Connection: close Server: gunicorn/19.8.1 Date: Mon, 04 Jun 2018 22:36:32 GMT Content-Type: application/json Content-Length: 162 Access-Control-Allow-Origin: * Access-Control-Allow-Credentials: true Via: 1.1 vegur {\"args\":{},\"headers\":{\"Accept\":\"*/*\",\"Connection\":\"close\",\"Host\":\"httpbin.org\",\"User-Agent\":\"kdb+/3.5\"},\"origin\":\"146.199.80.196\",\"url\":\"http://httpbin.org/get\"}","title":"Examples"}]}